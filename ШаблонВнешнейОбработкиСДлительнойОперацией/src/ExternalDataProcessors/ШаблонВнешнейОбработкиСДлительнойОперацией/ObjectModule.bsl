
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Информация = "";
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Наименование = Метаданные().Синоним;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = ПараметрыРегистрации.Наименование;
	Команда.Идентификатор = ПараметрыРегистрации.Наименование;
	Команда.Использование = "ОткрытиеФормы";
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

Процедура ОбработкаДанныхВФоне(Параметры, АдресХранилищаРезультата) Экспорт
	
	ПрочитатьРеквизитыИТабличныеЧасти(Параметры);
	
	Результат = Новый Структура;
	
	// TODO: Реализовать обработку данных
	// ДлительныеОперации.СообщитьПрогресс(0, "Начало операции");
	// ДлительныеОперации.СообщитьПрогресс(100, "Завершение");
	
	ЗаписатьРеквизитыИТабличныеЧасти(Результат);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилищаРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет загрузку реквизитов и табличных частей из параметров в обработку
// 
// Параметры:
//  Параметры - Структура - :
// 		* _СлужебныеПараметры - Структура - Служебные параметры, созданные процедурой ЗаписатьРеквизитыИТабличныеЧасти:
// 			* Реквизиты - Структура -
// 			* ТабличныеЧасти - Структура -
//  ЗагружаемыеРеквизиты - Строка, Неопределено - Загрузить только указанные реквизиты
//  ЗагружаемыеТабличныеЧасти - Строка, Неопределено - Загрузить только указанные табличные части
Процедура ПрочитатьРеквизитыИТабличныеЧасти(Параметры, Знач ЗагружаемыеРеквизиты = Неопределено, Знач ЗагружаемыеТабличныеЧасти = Неопределено) Экспорт
	
	Если ТипЗнч(Параметры) <> Тип("Структура") ИЛИ Не Параметры.Свойство("_СлужебныеПараметры") Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныеПараметры = Параметры._СлужебныеПараметры;
	Реквизиты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СлужебныеПараметры, "Реквизиты", Новый Структура);
	ТабличныеЧасти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СлужебныеПараметры, "ТабличныеЧасти", Новый Структура);
			
	Если ЗагружаемыеРеквизиты <> Неопределено Тогда
		
		ЗагружаемыеРеквизиты = СтрРазделить(СтрЗаменить(ЗагружаемыеРеквизиты, " ", ""), ",", Ложь);
		Для Каждого ИмяРеквизита Из ЗагружаемыеРеквизиты Цикл
            ЭтотОбъект[ИмяРеквизита] = Реквизиты[ИмяРеквизита];
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючИЗначение Из Реквизиты Цикл
			ИмяРеквизита = КлючИЗначение.Ключ;
			ЗначениеРеквизита = КлючИЗначение.Значение;

			ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ЗагружаемыеТабличныеЧасти <> Неопределено Тогда
		
		ЗагружаемыеТабличныеЧасти = СтрРазделить(СтрЗаменить(ЗагружаемыеТабличныеЧасти, " ", ""), ",", Ложь);
		Для Каждого ИмяТЧ Из ЗагружаемыеТабличныеЧасти Цикл
            ЭтотОбъект[ИмяТЧ].Загрузить(ТабличныеЧасти[ИмяТЧ]);
		КонецЦикла;
		
	Иначе
		
		Для Каждого КлючИЗначение Из ТабличныеЧасти Цикл
			ИмяТЧ = КлючИЗначение.Ключ;
			ТаблицаЗначений = КлючИЗначение.Значение;

			ЭтотОбъект[ИмяТЧ].Загрузить(ТаблицаЗначений);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись значений реквизитов и табличных частей обработки в параметры для передачи длительной операции
// 
// Параметры:
//  Параметры - Структура - Параметры
//  ВыгружаемыеРеквизиты - Строка, Неопределено - Выгрузить только указанные реквизиты
//  ВыгружаемыеТабличныеЧасти - Строка, Неопределено - Выгрузить только указанные табличные части
Процедура ЗаписатьРеквизитыИТабличныеЧасти(Параметры, Знач ВыгружаемыеРеквизиты = Неопределено, Знач ВыгружаемыеТабличныеЧасти = Неопределено) Экспорт
	
	СлужебныеПараметры = Новый Структура;
	Реквизиты = Новый Структура;
	ТабличныеЧасти = Новый Структура;
	
	МетаданныеОбработки = Метаданные();
	
	Если ВыгружаемыеРеквизиты <> Неопределено Тогда
		
		ВыгружаемыеРеквизиты = СтрРазделить(СтрЗаменить(ВыгружаемыеРеквизиты, " ", ""), ",", Ложь);
		Для Каждого ИмяРеквизита Из ВыгружаемыеРеквизиты Цикл
            Реквизиты.Вставить(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОбъектМетаданных Из МетаданныеОбработки.Реквизиты Цикл
            Реквизиты.Вставить(ОбъектМетаданных.Имя, ЭтотОбъект[ОбъектМетаданных.Имя]);
		КонецЦикла;	
		
	КонецЕсли;
	
	Если ВыгружаемыеТабличныеЧасти <> Неопределено Тогда
		
		ВыгружаемыеТабличныеЧасти = СтрРазделить(СтрЗаменить(ВыгружаемыеТабличныеЧасти, " ", ""), ",", Ложь);
		Для Каждого ИмяТЧ Из ВыгружаемыеТабличныеЧасти Цикл
            ТабличныеЧасти.Вставить(ИмяТЧ, ЭтотОбъект[ИмяТЧ].Выгрузить());
		КонецЦикла;
		
	Иначе
		
		Для Каждого ОбъектМетаданных Из МетаданныеОбработки.ТабличныеЧасти Цикл
            ТабличныеЧасти.Вставить(ОбъектМетаданных.Имя, ЭтотОбъект[ОбъектМетаданных.Имя].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
	СлужебныеПараметры.Вставить("Реквизиты", Реквизиты);
	СлужебныеПараметры.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Параметры.Вставить("_СлужебныеПараметры", СлужебныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
